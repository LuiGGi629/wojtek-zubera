<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://luiggi629.github.io/wojtek-zubera/feed.xml" rel="self" type="application/atom+xml" /><link href="https://luiggi629.github.io/wojtek-zubera/" rel="alternate" type="text/html" /><updated>2020-09-09T00:52:13-05:00</updated><id>https://luiggi629.github.io/wojtek-zubera/feed.xml</id><title type="html">Wojtek Zubera</title><subtitle>People and communication skills are crucial.</subtitle><entry><title type="html">Python Environment for Data Science</title><link href="https://luiggi629.github.io/wojtek-zubera/poetry/" rel="alternate" type="text/html" title="Python Environment for Data Science" /><published>2020-09-08T00:00:00-05:00</published><updated>2020-09-08T00:00:00-05:00</updated><id>https://luiggi629.github.io/wojtek-zubera/poetry-pyenv</id><content type="html" xml:base="https://luiggi629.github.io/wojtek-zubera/poetry/">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-09-08-poetry-pyenv.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h1 id=&quot;Python-Environment&quot;&gt;Python Environment&lt;a class=&quot;anchor-link&quot; href=&quot;#Python-Environment&quot;&gt; &lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&quot;Interpreter&quot;&gt;Interpreter&lt;a class=&quot;anchor-link&quot; href=&quot;#Interpreter&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;If you have programs that require different python versions or programs that depend on different versions of the same third-party module and you want to switch between those programs seamlessly?&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Pyenv will help you doing that!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can install Pyenv by&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl https://pyenv.run &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; bash
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After that, add the following lines to your .bashrc (same for .zshrc) to have pyenv available in your terminal&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;~/.pyenv/bin:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;pyenv init -&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;pyenv virtualenv-init -&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I had to restart my terminal afterwards&lt;/p&gt;
&lt;p&gt;On Ubuntu install the following ones to not run into problems&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install build-essential libsqlite3-dev sqlite3 bzip2 libbz2-dev zlib1g-dev libssl-dev openssl libgdbm-dev libgdbm-compat-dev liblzma-dev libreadline-dev libncursesw5-dev libffi-dev uuid-dev
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, to install a python interpreter just do&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pyenv install VERSION_YOU_WOULD_LIKE_TO_INSTALL
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can list out all versions available via pyenv&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pyenv install --list
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To make it concrete, let’s install python 3.8.2 and make it your default global-interpreter&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pyenv install &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;.8.2
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pyenv global &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;.8.2
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;Dependency-Management-via-poetry&quot;&gt;Dependency Management via &lt;a href=&quot;https://python-poetry.org/&quot;&gt;poetry&lt;/a&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#Dependency-Management-via-poetry&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The way the authors recommend installing poetry is&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; python
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Another way is using pip and pyenv-virtualenv.&lt;/p&gt;
&lt;p&gt;Create a virtual environment called tools that is based on 3.8.2&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pyenv virtualenv &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;.8.2 tools
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Install poetry into the tools virtual env&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pyenv activate tools
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python -m pip install poetry
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Check installed poetry version&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;poetry --version
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Leave the virtual env&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pyenv deactivate
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add your tools virtual env to the globally available ones&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pyenv global &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;.8.2 tools
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I had to restart my terminal afterwards&lt;/p&gt;
&lt;p&gt;You can start using poetry&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;poetry --version
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Before using poetry I recommend configuring it, such that it creates your project’s virtual environment in a .venv folder inside the project directory.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;poetry config virtualenvs.in-project &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Initialze a new project&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;poetry new ml-project
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ml-project
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add modules and create virtual environment.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;poetry add pandas --extras all
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;Consistent-Formatting-and-Readability&quot;&gt;Consistent Formatting and Readability&lt;a class=&quot;anchor-link&quot; href=&quot;#Consistent-Formatting-and-Readability&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We add black as a development dependency with --dev as we don't
need it when it comes to production&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;poetry add --dev black
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I’d rather maintain the recommended 79 character length. I just need to configure my &lt;em&gt;pyproject.toml&lt;/em&gt; to &lt;em&gt;line-length=79&lt;/em&gt; and everything is all set. Here’s my &lt;em&gt;.toml&lt;/em&gt; file for configuring black:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[tool.black]
line-length = 79
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;poetry add --dev flake8
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Insight of your project's dependencies&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;poetry show --tree
poetry show --latest
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In order for black to work nicely with &lt;a href=&quot;https://flake8.pycqa.org/en/latest/&quot;&gt;flake8&lt;/a&gt;, we need to list down some error codes to ignore. &lt;em&gt;tox.ini&lt;/em&gt; configuration below:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;touch tox.ini .
&lt;/pre&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code&gt;# Flake8 Configuration
[flake8]
ignore = E203, D203, E266, E501, W503, F403, F401
exclude =
    .tox,
    .git,
    __pycache__,
    docs/source/conf.py,
    build,
    dist,
    tests/fixtures/*,
    *.pyc,
    *.egg-info,
    .cache,
    .eggs
max-line-length = 79
max-complexity = 18
select = B,C,E,F,W,T4,B9
format = ${cyan}%(path)s${reset}:${yellow_bold}%(row)d${reset}:${green_bold}%(col)d${reset}: ${red_bold}%(code)s${reset} %(text)s&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;mypy-Type-Correctness&quot;&gt;&lt;a href=&quot;https://mypy.readthedocs.io/en/stable/&quot;&gt;mypy&lt;/a&gt; Type-Correctness&lt;a class=&quot;anchor-link&quot; href=&quot;#mypy-Type-Correctness&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Through type annotations, your code becomes better to understand, maintain, and less prone to errors. Why less prone to errors? Because you can statically check if the types of your variables and functions match the expected ones.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;poetry add --dev mypy
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Running mypy might create a lot of errors. You can configure it to only warn you about the things you are interested in. You do that by adding a mypy.ini file to your project and refer to the &lt;a href=&quot;https://mypy.readthedocs.io/en/latest/config_file.html&quot;&gt;documentation&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h3 id=&quot;Pre-commit&quot;&gt;&lt;a href=&quot;https://pre-commit.com/&quot;&gt;Pre-commit&lt;/a&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#Pre-commit&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Pre-commit is a tool that executes checks before you commit code to your repository. When those checks fail, your commit will be rejected. With that, your repository will never see not formatted code, or none type-checked one, or anything else depending on the checks you are going to include.&lt;/p&gt;
&lt;p&gt;You can either install it directly into your project using &lt;a href=&quot;https://python-poetry.org/docs/&quot;&gt;poetry&lt;/a&gt; or install it on your local machine. I prefer the latter, as pre-commit is only used locally and not on a CI/CD server. In contrast, black and mypy should run on a CI/CD server, thus, it makes sense to add them to the project’s dev dependencies. Here is how one could install it making use of the already existing tool virtual environment.&lt;/p&gt;
&lt;p&gt;Install pre-commit into the tools virtual env&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pyenv activate tools
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python -m pip install pre-commit
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pyenv deactivate
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pre-commit --version
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To use it, you first need to add a config file called &lt;em&gt;.pre-commit-config.yaml&lt;/em&gt; to the top-level folder of your project. In that file, you configure all the hooks that should run.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;touch .pre-commit-config.yaml .
&lt;/pre&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code&gt;repos:
    -   repo: https://github.com/psf/black
        rev: 20.8b1
        hooks:
        - id: black
          language_version: python3.8
    -   repo: https://github.com/pre-commit/mirrors-mypy
        rev: v0.782
        hooks:
        - id: mypy
    -   repo: https://gitlab.com/pycqa/flake8
        rev: 3.8.3  # pick a git hash / tag to point to
        hooks:
        - id: flake8&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the top level folder run&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pre-commit install
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is recommended to manually run pre-commit on all files as is it only touches the files that have been changed since the last commit.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pre-commit run --all --show-diff-on-failure
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, the hooks will run on every commit. The black hook will not only check for formatting issues but also format the files accordingly. Whenever you add a new hook, so also at the very beginning, it is recommended to manually run pre-commit on all files as is it only touches the files that have been changed since the last commit&lt;/p&gt;
&lt;h1 id=&quot;Results&quot;&gt;Results&lt;a class=&quot;anchor-link&quot; href=&quot;#Results&quot;&gt; &lt;/a&gt;&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/wojtek-zubera/images/copied_from_nb/poetry_pyenv_imgs/precommit_pipeline.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;So what we have is a pipeline that safeguards project against wrongly-formatted code &amp;mdash; now we can focus on content.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Credits to&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://towardsdatascience.com/how-to-setup-an-awesome-python-environment-for-data-science-or-anything-else-35d358cc95d5&quot;&gt;Simon Hawe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ljvmiranda921.github.io/notebook/2018/06/21/precommits-using-black-and-flake8/&quot;&gt;LJ MIRANDA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://luiggi629.github.io/wojtek-zubera/poetry_pyenv_imgs/precommit_pipeline.png" /><media:content medium="image" url="https://luiggi629.github.io/wojtek-zubera/poetry_pyenv_imgs/precommit_pipeline.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>
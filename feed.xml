<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://luiggi629.github.io/wojtek-zubera/feed.xml" rel="self" type="application/atom+xml" /><link href="https://luiggi629.github.io/wojtek-zubera/" rel="alternate" type="text/html" /><updated>2020-09-20T05:34:32-05:00</updated><id>https://luiggi629.github.io/wojtek-zubera/feed.xml</id><title type="html">Wojtek Zubera</title><subtitle>People and communication skills are crucial.</subtitle><entry><title type="html">Optimizing SQL and Python Pipelines for Data Science</title><link href="https://luiggi629.github.io/wojtek-zubera/optpysql/" rel="alternate" type="text/html" title="Optimizing SQL and Python Pipelines for Data Science" /><published>2020-09-19T00:00:00-05:00</published><updated>2020-09-19T00:00:00-05:00</updated><id>https://luiggi629.github.io/wojtek-zubera/opitimizing-py-sql</id><content type="html" xml:base="https://luiggi629.github.io/wojtek-zubera/optpysql/">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-09-19-opitimizing-py-sql.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Review-SQL-Best-Practices&quot;&gt;Review SQL Best Practices&lt;a class=&quot;anchor-link&quot; href=&quot;#Review-SQL-Best-Practices&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;Why the FROM statement is so important&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;The FROM statement determines how you will structure the rest of your query&lt;/li&gt;
&lt;li&gt;You want your FROM table to be a core table with the fewest columns &amp;amp; rows that is highly indexed&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;                              &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;usr&lt;/span&gt;                              &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orders&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;or&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orders&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;or&lt;/span&gt;                        &lt;span class=&quot;k&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;usr&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;usr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer_id&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;usr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer_id&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;                       &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order_date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;date_sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;current_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;INTERVAL&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;date_sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;current_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;INTERVAL&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;13 seconds to run&lt;/strong&gt; ------------------------------ &lt;strong&gt;19 seconds to run&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Two queries that return exact same results. The only difference is we flip the tables, and it makes 6 seconds speed-up.&lt;/p&gt;
&lt;h3 id=&quot;Why-Temporary-Tables-Rock&quot;&gt;Why Temporary Tables Rock&lt;a class=&quot;anchor-link&quot; href=&quot;#Why-Temporary-Tables-Rock&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Temporary tables improve readability over (nested) subqueries, i.e.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;goodnameforatemptable&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blah&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;goodnameforatemptable&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;instead&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Keeps your code readable and makes troubleshooting much easier.&lt;/li&gt;
&lt;li&gt;Helps you follow the single responsibility principle.
The &lt;a href=&quot;https://en.wikipedia.org/wiki/Query_optimization&quot;&gt;Query Optimizer&lt;/a&gt; may not be able to properly optimize a query with subqueries and will likely result in longer run times.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Some-Simple-SQL-Optimization-things-to-remember&quot;&gt;Some Simple SQL Optimization things to remember&lt;a class=&quot;anchor-link&quot; href=&quot;#Some-Simple-SQL-Optimization-things-to-remember&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;When doing wildcard searches use &lt;code&gt;something%&lt;/code&gt; (limit it to backend wildcard search) vs. &lt;code&gt;%something%&lt;/code&gt; if you can.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Functions on indexed columns in the where clause remove the indexing.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;substring&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;F&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;vs.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIKE&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;F%&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Don't pull in columns you don't need.&lt;/li&gt;
&lt;li&gt;Move filters from the &lt;code&gt;WHERE&lt;/code&gt; statement to the &lt;code&gt;JOIN&lt;/code&gt; condition if using an &lt;code&gt;OUTER JOIN&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Use your indices as much as possible.&lt;/li&gt;
&lt;li&gt;If you can, use &lt;code&gt;UNION ALL&lt;/code&gt; instead of &lt;code&gt;UNION DISTINCT&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Data-Manipulation-&amp;amp;-Feature-Engineering-Before-Python&quot;&gt;Data Manipulation &amp;amp; Feature Engineering Before Python&lt;a class=&quot;anchor-link&quot; href=&quot;#Data-Manipulation-&amp;amp;-Feature-Engineering-Before-Python&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&quot;Joining-Multiple-Data-Sources&quot;&gt;Joining Multiple Data Sources&lt;a class=&quot;anchor-link&quot; href=&quot;#Joining-Multiple-Data-Sources&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;This is SQL's bread and butter, it's wheelhouse, what it was made to do.&lt;/li&gt;
&lt;li&gt;Even if you have multiple raw data files, I advocate for standing up a quick DB and loading the CSVs in there vs. bringing them straight into pandas &amp;mdash; you don't have to reload the file every time you want to look at the data.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Narrowing-down-your-dataset&quot;&gt;Narrowing down your dataset&lt;a class=&quot;anchor-link&quot; href=&quot;#Narrowing-down-your-dataset&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;More data isn't always better &amp;mdash; loading 50 million rows of data straight into memory will be incredibly time consuming, inefficient, and does not necessarily lead to better machine learning scores.&lt;/li&gt;
&lt;li&gt;Time frame considerations &amp;mdash; do you see a dramatic improvement in model scores with two years of data vs. one year?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Learning-Curves-to-Help-Determine-Dataset-Sizes&quot;&gt;Learning Curves to Help Determine Dataset Sizes&lt;a class=&quot;anchor-link&quot; href=&quot;#Learning-Curves-to-Help-Determine-Dataset-Sizes&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Learning Curves help you understand not only your algorithm's &lt;a href=&quot;https://en.wikipedia.org/wiki/Bias%E2%80%93variance_tradeoff&quot;&gt;bias vs. variance&lt;/a&gt; but also how many records you need to train a model you're happy with.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;High variance&lt;/strong&gt; &amp;mdash; If a learning algorithm is suffering from high variance, getting more training data is likely to help.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;High bias&lt;/strong&gt; &amp;mdash; If a learning algorithm is suffering from high bias, getting more training data will not (by itself) help much.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Feature-Engineering&quot;&gt;Feature Engineering&lt;a class=&quot;anchor-link&quot; href=&quot;#Feature-Engineering&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Case statements prevent a size mismatch that can sometimes happen with &lt;code&gt;pandas.get_dummies()&lt;/code&gt; in train vs test sets.&lt;/li&gt;
&lt;li&gt;Lead, Lag, Rank functions are powerful calculations that are oddly written in SQL but can leverage indices and run more optimally in SQL.&lt;/li&gt;
&lt;li&gt;A lot of features can be created before you even load the data if you'd like.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Pandas&quot;&gt;Pandas&lt;a class=&quot;anchor-link&quot; href=&quot;#Pandas&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;You have the whole Python toolset at your disposal.&lt;/li&gt;
&lt;li&gt;You can do more advanced and intensive data manipulation in code that is easily readable and &lt;strong&gt;testable&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Easy integration with data visualization libraries, jupyter notebooks, and functions like &lt;code&gt;data_frame.describe()&lt;/code&gt; make it ideal for &lt;a href=&quot;https://en.wikipedia.org/wiki/Exploratory_data_analysis&quot;&gt;EDA&lt;/a&gt; (exploratory data analysis).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;How-to-Optimize-Reading-and-Writing-with-Python&quot;&gt;How to Optimize Reading and Writing with Python&lt;a class=&quot;anchor-link&quot; href=&quot;#How-to-Optimize-Reading-and-Writing-with-Python&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&quot;Reading-in-data-from-SQL&quot;&gt;Reading in data from SQL&lt;a class=&quot;anchor-link&quot; href=&quot;#Reading-in-data-from-SQL&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pandas.read_sql()&lt;/code&gt; and &lt;code&gt;pandas.read_gbq()&lt;/code&gt; are notoriously slow.&lt;/li&gt;
&lt;li&gt;The best way I have found to do this is to save your final query as a table and export that table to CSV or CSV.GZ and then load the CSV into pandas via &lt;code&gt;pandas.read_csv()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;What this also allows for is then each time moving forward you only have to load the CSV directly.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Writing-data-to-SQL&quot;&gt;Writing data to SQL&lt;a class=&quot;anchor-link&quot; href=&quot;#Writing-data-to-SQL&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Similarly, &lt;code&gt;data_frame.to_sql()&lt;/code&gt;, &lt;code&gt;data_frame.to_gbq()&lt;/code&gt;, even Spark's &lt;code&gt;data_frame.write.jdbc()&lt;/code&gt; are also slow, batch writing to the rescue.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SQLAlchemy &amp;amp; Pandas:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sessionmaker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dest_db_con&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bulk_insert_mappings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MentorInformation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;records&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Spark:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;jdbcUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jdbc:mysql://{}:3306/{}?useServerPrepStmts=false&amp;amp;rewriteBatchedStatements=true&amp;amp;user{}&amp;amp;password={}&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&amp;amp;rewriteBatchedStatements=true&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;With these steps, I've seen jobs that used to take hours now take minutes.&lt;/p&gt;
&lt;p&gt;Conclusion:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Knowing what tool is right for the job is extremely powerful.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Notes from:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=H5FNFxHgSj8&amp;amp;list=LLqaZUbmWbk33CkdqqWfC1xw&amp;amp;index=2&quot;&gt;https://www.youtube.com/watch?v=H5FNFxHgSj8&amp;amp;list=LLqaZUbmWbk33CkdqqWfC1xw&amp;amp;index=2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Semantic Commit Messages</title><link href="https://luiggi629.github.io/wojtek-zubera/semantic/" rel="alternate" type="text/html" title="Semantic Commit Messages" /><published>2020-09-18T00:00:00-05:00</published><updated>2020-09-18T00:00:00-05:00</updated><id>https://luiggi629.github.io/wojtek-zubera/semantic-commit-messages</id><content type="html" xml:base="https://luiggi629.github.io/wojtek-zubera/semantic/">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-09-18-semantic-commit-messages.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Format: &lt;code&gt;&amp;lt;type&amp;gt;(&amp;lt;scope&amp;gt;): &amp;lt;subject&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;scope&amp;gt;&lt;/code&gt; is optional&lt;/p&gt;
&lt;h2 id=&quot;Example&quot;&gt;Example&lt;a class=&quot;anchor-link&quot; href=&quot;#Example&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;feat: add hat wobble
^--^  ^------------^
|     |
|     +-&amp;gt; Summary in present tense.
|
+-------&amp;gt; Type: chore, docs, feat, fix, refactor, style, or test.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;feat&lt;/code&gt;: (new feature for the user, not a new feature for build script)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fix&lt;/code&gt;: (bug fix for the user, not a fix to a build script)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docs&lt;/code&gt;: (changes to the documentation)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;style&lt;/code&gt;: (formatting, missing semi colons, etc; no production code change)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;refactor&lt;/code&gt;: (refactoring production code, eg. renaming a variable)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/wojtek-zubera/images/copied_from_nb/test&quot;&gt;&lt;code&gt;test&lt;/code&gt;&lt;/a&gt;: (adding missing tests, refactoring tests; no production code change)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chore&lt;/code&gt;: (updating grunt tasks etc; no production code change)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/joshbuchea/6f47e86d2510bce28f8e7f42ae84c716&quot;&gt;https://gist.github.com/joshbuchea/6f47e86d2510bce28f8e7f42ae84c716&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.conventionalcommits.org/&quot;&gt;https://www.conventionalcommits.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://seesparkbox.com/foundry/semantic_commit_messages&quot;&gt;https://seesparkbox.com/foundry/semantic_commit_messages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://karma-runner.github.io/1.0/dev/git-commit-msg.html&quot;&gt;http://karma-runner.github.io/1.0/dev/git-commit-msg.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Git Tips</title><link href="https://luiggi629.github.io/wojtek-zubera/gitips/" rel="alternate" type="text/html" title="Git Tips" /><published>2020-09-17T00:00:00-05:00</published><updated>2020-09-17T00:00:00-05:00</updated><id>https://luiggi629.github.io/wojtek-zubera/git-tips</id><content type="html" xml:base="https://luiggi629.github.io/wojtek-zubera/gitips/">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-09-17-git-tips.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;When-working-with-multiple-branches-you-can-stash-changes-away-that-you-are-not-ready-to-commit-yet:&quot;&gt;When working with multiple branches you can stash changes away that you are not ready to commit yet:&lt;a class=&quot;anchor-link&quot; href=&quot;#When-working-with-multiple-branches-you-can-stash-changes-away-that-you-are-not-ready-to-commit-yet:&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git stash save &lt;span class=&quot;s2&quot;&gt;&amp;quot;save message&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then you can retrieve them later with:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git stash list
git stash pop &amp;lt;stash_item_hash&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;use:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git stash apply
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;instead of:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git stash pop &amp;lt;stash_item_hash&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;when you think you'll want to use those stashed changes again later&lt;/p&gt;
&lt;h2 id=&quot;When-you-want-to-add-more-changes-to-last-(local)-commit,-use:&quot;&gt;When you want to add more changes to last (local) commit, use:&lt;a class=&quot;anchor-link&quot; href=&quot;#When-you-want-to-add-more-changes-to-last-(local)-commit,-use:&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add file&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
git commit --amend
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It opens your editor and lets you modify the last commit.&lt;/p&gt;
&lt;p&gt;When I want to amend on last commit, usually I don't want to change my message, so:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git commit —amend —no-edit
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;is a time savers!&lt;/p&gt;
&lt;h2 id=&quot;On-the-other-hand,-if-you-want-to-spread-out-your-changes-over-multiple-commits-(granular-commits-are-good!),-use:&quot;&gt;On the other hand, if you want to spread out your changes over multiple commits (granular commits are good!), use:&lt;a class=&quot;anchor-link&quot; href=&quot;#On-the-other-hand,-if-you-want-to-spread-out-your-changes-over-multiple-commits-(granular-commits-are-good!),-use:&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add -p
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here you can commit only parts (&quot;hunks&quot;) of your changes in interactive mode.&lt;/p&gt;
&lt;p&gt;&quot;-p&quot; is nice for git add, but helps with other commands too (e.g. reset, checkout, log)&lt;/p&gt;
&lt;h2 id=&quot;Imagine-you-got-all-excited-coding,-but-you-committed-them-on-the-main-branch.&quot;&gt;Imagine you got all excited coding, but you committed them on the main branch.&lt;a class=&quot;anchor-link&quot; href=&quot;#Imagine-you-got-all-excited-coding,-but-you-committed-them-on-the-main-branch.&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;No problem: if you forgot to branch off earlier, you can still do so at this point:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git branch new_branch
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you have your changes on both original and new branch so you can wipe them out on former:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git checkout original_branch
git reset HEAD~&amp;lt;number-of-commits-to-go-back&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(Make sure this is all local though, don't go modify changes you already pushed!)&lt;/p&gt;
&lt;h2 id=&quot;If-you-want-to-use-a-commit-from-one-branch-on-another,-you-can-cherry-pick-it:&quot;&gt;If you want to use a commit from one branch on another, you can cherry pick it:&lt;a class=&quot;anchor-link&quot; href=&quot;#If-you-want-to-use-a-commit-from-one-branch-on-another,-you-can-cherry-pick-it:&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git cherry-pick &amp;lt;commit_from_anywhere_in_your_repo&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;If-you-want-to-change-a-commit-that-has-already-been-pushed-(for-example-if-you-want-to-make-some-changes-after-a-PR-review),-you-can-use-fixup-commits-and-rebase-with-autosquash:&quot;&gt;If you want to change a commit that has already been pushed (for example if you want to make some changes after a PR review), you can use fixup commits and rebase with autosquash:&lt;a class=&quot;anchor-link&quot; href=&quot;#If-you-want-to-change-a-commit-that-has-already-been-pushed-(for-example-if-you-want-to-make-some-changes-after-a-PR-review),-you-can-use-fixup-commits-and-rebase-with-autosquash:&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;stage changes&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git commit --fixup &amp;lt;commit &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt; to update&amp;gt;
git rebase -i --autosquash &amp;lt;branch to rebase onto&amp;gt;
git push --force-with-lease
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/in/bbelderbos&quot;&gt;https://www.linkedin.com/in/bbelderbos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Properly Fork and Generate Pull Requests</title><link href="https://luiggi629.github.io/wojtek-zubera/github-forking/" rel="alternate" type="text/html" title="Properly Fork and Generate Pull Requests" /><published>2020-09-09T00:00:00-05:00</published><updated>2020-09-09T00:00:00-05:00</updated><id>https://luiggi629.github.io/wojtek-zubera/GitHub-Forking</id><content type="html" xml:base="https://luiggi629.github.io/wojtek-zubera/github-forking/">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-09-09-GitHub-Forking.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;&lt;strong&gt;Copyright&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Copyright 2017, Chase Pettit, &lt;a href=&quot;https://gist.github.com/Chaser324/ce0505fbed06b947d962&quot;&gt;https://gist.github.com/Chaser324/ce0505fbed06b947d962&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MIT License, &lt;a href=&quot;http://www.opensource.org/licenses/mit-license.php&quot;&gt;http://www.opensource.org/licenses/mit-license.php&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Whether you're trying to give back to the open source community or collaborating on your own projects, knowing how to properly fork and generate pull requests is essential. Unfortunately, it's quite easy to make mistakes or not know what you should do when you're initially learning the process. I know that I certainly had considerable initial trouble with it, and I found a lot of the information on GitHub and around the internet to be rather piecemeal and incomplete - part of the process described here, another there, common hangups in a different place, and so on.&lt;/p&gt;
&lt;p&gt;In an attempt to coallate this information for myself and others, this short tutorial is what I've found to be fairly standard procedure for creating a fork, doing your work, issuing a pull request, and merging that pull request back into the original project.&lt;/p&gt;
&lt;h2 id=&quot;Creating-a-Fork&quot;&gt;Creating a Fork&lt;a class=&quot;anchor-link&quot; href=&quot;#Creating-a-Fork&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Just head over to the GitHub page and click the &quot;Fork&quot; button. It's just that simple. Once you've done that, you can use your favorite git client to clone your repo or just head straight to the command line:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Clone your fork to your local machine&lt;/span&gt;
git clone git@github.com:USERNAME/FORKED-PROJECT.git
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;Keeping-Your-Fork-Up-to-Date&quot;&gt;Keeping Your Fork Up to Date&lt;a class=&quot;anchor-link&quot; href=&quot;#Keeping-Your-Fork-Up-to-Date&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;While this isn't an absolutely necessary step, if you plan on doing anything more than just a tiny quick fix, you'll want to make sure you keep your fork up to date by tracking the original &quot;upstream&quot; repo that you forked. To do this, you'll need to add a remote:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Add &amp;#39;upstream&amp;#39; repo to list of remotes&lt;/span&gt;
git remote add upstream https://github.com/UPSTREAM-USER/ORIGINAL-PROJECT.git

&lt;span class=&quot;c1&quot;&gt;# Verify the new remote named &amp;#39;upstream&amp;#39;&lt;/span&gt;
git remote -v
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Whenever you want to update your fork with the latest upstream changes, you'll need to first fetch the upstream repo's branches and latest commits to bring them into your repository:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Fetch from upstream remote&lt;/span&gt;
git fetch upstream

&lt;span class=&quot;c1&quot;&gt;# View all branches, including those from upstream&lt;/span&gt;
git branch -va
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, checkout your own master branch and merge the upstream repo's master branch:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Checkout your master branch and merge upstream&lt;/span&gt;
git checkout master
git merge upstream/master
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If there are no unique commits on the local master branch, git will simply perform a fast-forward. However, if you have been making changes on master (in the vast majority of cases you probably shouldn't be - &lt;a href=&quot;#doing-your-work&quot;&gt;see the next section&lt;/a&gt;, you may have to deal with conflicts. When doing so, be careful to respect the changes made upstream.&lt;/p&gt;
&lt;p&gt;Now, your local master branch is up-to-date with everything modified upstream.&lt;/p&gt;
&lt;h2 id=&quot;Doing-Your-Work&quot;&gt;Doing Your Work&lt;a class=&quot;anchor-link&quot; href=&quot;#Doing-Your-Work&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&quot;Create-a-Branch&quot;&gt;Create a Branch&lt;a class=&quot;anchor-link&quot; href=&quot;#Create-a-Branch&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Whenever you begin work on a new feature or bugfix, it's important that you create a new branch. Not only is it proper git workflow, but it also keeps your changes organized and separated from the master branch so that you can easily submit and manage multiple pull requests for every task you complete.&lt;/p&gt;
&lt;p&gt;To create a new branch and start working on it:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Checkout the master branch - you want your new branch to come from master&lt;/span&gt;
git checkout master

&lt;span class=&quot;c1&quot;&gt;# Create a new branch named newfeature (give your branch its own simple informative name)&lt;/span&gt;
git branch newfeature

&lt;span class=&quot;c1&quot;&gt;# Switch to your new branch&lt;/span&gt;
git checkout newfeature
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, go to town hacking away and making whatever changes you want to.&lt;/p&gt;
&lt;h2 id=&quot;Submitting-a-Pull-Request&quot;&gt;Submitting a Pull Request&lt;a class=&quot;anchor-link&quot; href=&quot;#Submitting-a-Pull-Request&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&quot;Cleaning-Up-Your-Work&quot;&gt;Cleaning Up Your Work&lt;a class=&quot;anchor-link&quot; href=&quot;#Cleaning-Up-Your-Work&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Prior to submitting your pull request, you might want to do a few things to clean up your branch and make it as simple as possible for the original repo's maintainer to test, accept, and merge your work.&lt;/p&gt;
&lt;p&gt;If any commits have been made to the upstream master branch, you should rebase your development branch so that merging it will be a simple fast-forward that won't require any conflict resolution work.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Fetch upstream master and merge with your repo&amp;#39;s master branch&lt;/span&gt;
git fetch upstream
git checkout master
git merge upstream/master

&lt;span class=&quot;c1&quot;&gt;# If there were any new commits, rebase your development branch&lt;/span&gt;
git checkout newfeature
git rebase master
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, it may be desirable to squash some of your smaller commits down into a small number of larger more cohesive commits. You can do this with an interactive rebase:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Rebase all commits on your development branch&lt;/span&gt;
git checkout 
git rebase -i master
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will open up a text editor where you can specify which commits to squash.&lt;/p&gt;
&lt;h3 id=&quot;Submitting&quot;&gt;Submitting&lt;a class=&quot;anchor-link&quot; href=&quot;#Submitting&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Once you've committed and pushed all of your changes to GitHub, go to the page for your fork on GitHub, select your development branch, and click the pull request button. If you need to make any adjustments to your pull request, just push the updates to GitHub. Your pull request will automatically track the changes on your development branch and update.&lt;/p&gt;
&lt;h2 id=&quot;Accepting-and-Merging-a-Pull-Request&quot;&gt;Accepting and Merging a Pull Request&lt;a class=&quot;anchor-link&quot; href=&quot;#Accepting-and-Merging-a-Pull-Request&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Take note that unlike the previous sections which were written from the perspective of someone that created a fork and generated a pull request, this section is written from the perspective of the original repository owner who is handling an incoming pull request. Thus, where the &quot;forker&quot; was referring to the original repository as &lt;code&gt;upstream&lt;/code&gt;, we're now looking at it as the owner of that original repository and the standard &lt;code&gt;origin&lt;/code&gt; remote.&lt;/p&gt;
&lt;h3 id=&quot;Checking-Out-and-Testing-Pull-Requests&quot;&gt;Checking Out and Testing Pull Requests&lt;a class=&quot;anchor-link&quot; href=&quot;#Checking-Out-and-Testing-Pull-Requests&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Open up the &lt;code&gt;.git/config&lt;/code&gt; file and add a new line under &lt;code&gt;[remote &quot;origin&quot;]&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fetch = +refs/pull/*/head:refs/pull/origin/*&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you can fetch and checkout any pull request so that you can test them:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Fetch all pull request branches&lt;/span&gt;
git fetch origin

&lt;span class=&quot;c1&quot;&gt;# Checkout out a given pull request branch based on its number&lt;/span&gt;
git checkout -b &lt;span class=&quot;m&quot;&gt;999&lt;/span&gt; pull/origin/999
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Keep in mind that these branches will be read only and you won't be able to push any changes.&lt;/p&gt;
&lt;h3 id=&quot;Automatically-Merging-a-Pull-Request&quot;&gt;Automatically Merging a Pull Request&lt;a class=&quot;anchor-link&quot; href=&quot;#Automatically-Merging-a-Pull-Request&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;In cases where the merge would be a simple fast-forward, you can automatically do the merge by just clicking the button on the pull request page on GitHub.&lt;/p&gt;
&lt;h3 id=&quot;Manually-Merging-a-Pull-Request&quot;&gt;Manually Merging a Pull Request&lt;a class=&quot;anchor-link&quot; href=&quot;#Manually-Merging-a-Pull-Request&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;To do the merge manually, you'll need to checkout the target branch in the source repo, pull directly from the fork, and then merge and push.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Checkout the branch you&amp;#39;re merging to in the target repo&lt;/span&gt;
git checkout master

&lt;span class=&quot;c1&quot;&gt;# Pull the development branch from the fork repo where the pull request development was done.&lt;/span&gt;
git pull https://github.com/forkuser/forkedrepo.git newfeature

&lt;span class=&quot;c1&quot;&gt;# Merge the development branch&lt;/span&gt;
git merge newfeature

&lt;span class=&quot;c1&quot;&gt;# Push master with the new feature merged into it&lt;/span&gt;
git push origin master
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that you're done with the development branch, you're free to delete it.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git branch -d newfeature
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Additional Reading&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.atlassian.com/git/tutorials/merging-vs-rebasing&quot;&gt;Atlassian - Merging vs. Rebasing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Sources&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://help.github.com/articles/fork-a-repo&quot;&gt;GitHub - Fork a Repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://help.github.com/articles/syncing-a-fork&quot;&gt;GitHub - Syncing a Fork&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://help.github.com/articles/checking-out-pull-requests-locally&quot;&gt;GitHub - Checking Out a Pull Request&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Python Environment for Data Science</title><link href="https://luiggi629.github.io/wojtek-zubera/poetry/" rel="alternate" type="text/html" title="Python Environment for Data Science" /><published>2020-09-08T00:00:00-05:00</published><updated>2020-09-08T00:00:00-05:00</updated><id>https://luiggi629.github.io/wojtek-zubera/poetry-pyenv</id><content type="html" xml:base="https://luiggi629.github.io/wojtek-zubera/poetry/">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-09-08-poetry-pyenv.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h1 id=&quot;Python-Environment&quot;&gt;Python Environment&lt;a class=&quot;anchor-link&quot; href=&quot;#Python-Environment&quot;&gt; &lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&quot;Interpreter&quot;&gt;Interpreter&lt;a class=&quot;anchor-link&quot; href=&quot;#Interpreter&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;If you have programs that require different python versions or programs that depend on different versions of the same third-party module and you want to switch between those programs seamlessly?&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Pyenv will help you doing that!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can install Pyenv by&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl https://pyenv.run &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; bash
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After that, add the following lines to your .bashrc (same for .zshrc) to have pyenv available in your terminal&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;~/.pyenv/bin:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;pyenv init -&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;pyenv virtualenv-init -&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I had to restart my terminal afterwards&lt;/p&gt;
&lt;p&gt;On Ubuntu install the following ones to not run into problems&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install build-essential libsqlite3-dev sqlite3 bzip2 libbz2-dev zlib1g-dev libssl-dev openssl libgdbm-dev libgdbm-compat-dev liblzma-dev libreadline-dev libncursesw5-dev libffi-dev uuid-dev
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, to install a python interpreter just do&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pyenv install VERSION_YOU_WOULD_LIKE_TO_INSTALL
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can list out all versions available via pyenv&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pyenv install --list
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To make it concrete, let’s install python 3.8.2 and make it your default global-interpreter&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pyenv install &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;.8.2
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pyenv global &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;.8.2
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;Dependency-Management-via-poetry&quot;&gt;Dependency Management via &lt;a href=&quot;https://python-poetry.org/&quot;&gt;poetry&lt;/a&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#Dependency-Management-via-poetry&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The way the authors recommend installing poetry is&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; python
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Another way is using pip and pyenv-virtualenv.&lt;/p&gt;
&lt;p&gt;Create a virtual environment called tools that is based on 3.8.2&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pyenv virtualenv &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;.8.2 tools
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Install poetry into the tools virtual env&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pyenv activate tools
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python -m pip install poetry
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Check installed poetry version&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;poetry --version
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Leave the virtual env&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pyenv deactivate
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add your tools virtual env to the globally available ones&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pyenv global &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;.8.2 tools
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I had to restart my terminal afterwards&lt;/p&gt;
&lt;p&gt;You can start using poetry&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;poetry --version
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Before using poetry I recommend configuring it, such that it creates your project’s virtual environment in a .venv folder inside the project directory.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;poetry config virtualenvs.in-project &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Initialze a new project&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;poetry new ml-project
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ml-project
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add modules and create virtual environment.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;poetry add pandas --extras all
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;Consistent-Formatting-and-Readability&quot;&gt;Consistent Formatting and Readability&lt;a class=&quot;anchor-link&quot; href=&quot;#Consistent-Formatting-and-Readability&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We add black as a development dependency with --dev as we don't
need it when it comes to production&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;poetry add --dev black
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I’d rather maintain the recommended 79 character length. I just need to configure my &lt;em&gt;pyproject.toml&lt;/em&gt; to &lt;em&gt;line-length=79&lt;/em&gt; and everything is all set. Here’s my &lt;em&gt;.toml&lt;/em&gt; file for configuring black:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[tool.black]
line-length = 79
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;poetry add --dev flake8
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Insight of your project's dependencies&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;poetry show --tree
poetry show --latest
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In order for black to work nicely with &lt;a href=&quot;https://flake8.pycqa.org/en/latest/&quot;&gt;flake8&lt;/a&gt;, we need to list down some error codes to ignore. &lt;em&gt;tox.ini&lt;/em&gt; configuration below:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;touch tox.ini .
&lt;/pre&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code&gt;# Flake8 Configuration
[flake8]
ignore = E203, D203, E266, E501, W503, F403, F401
exclude =
    .tox,
    .git,
    __pycache__,
    docs/source/conf.py,
    build,
    dist,
    tests/fixtures/*,
    *.pyc,
    *.egg-info,
    .cache,
    .eggs
max-line-length = 79
max-complexity = 18
select = B,C,E,F,W,T4,B9
format = ${cyan}%(path)s${reset}:${yellow_bold}%(row)d${reset}:${green_bold}%(col)d${reset}: ${red_bold}%(code)s${reset} %(text)s&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;mypy-Type-Correctness&quot;&gt;&lt;a href=&quot;https://mypy.readthedocs.io/en/stable/&quot;&gt;mypy&lt;/a&gt; Type-Correctness&lt;a class=&quot;anchor-link&quot; href=&quot;#mypy-Type-Correctness&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Through type annotations, your code becomes better to understand, maintain, and less prone to errors. Why less prone to errors? Because you can statically check if the types of your variables and functions match the expected ones.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;poetry add --dev mypy
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Running mypy might create a lot of errors. You can configure it to only warn you about the things you are interested in. You do that by adding a mypy.ini file to your project and refer to the &lt;a href=&quot;https://mypy.readthedocs.io/en/latest/config_file.html&quot;&gt;documentation&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h3 id=&quot;Isort&quot;&gt;&lt;a href=&quot;https://github.com/PyCQA/isort&quot;&gt;Isort&lt;/a&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#Isort&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Isort is a Python utility / library to sort imports alphabetically, and automatically separated into sections and by type.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;poetry add --dev isort
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;Pre-commit&quot;&gt;&lt;a href=&quot;https://pre-commit.com/&quot;&gt;Pre-commit&lt;/a&gt;&lt;a class=&quot;anchor-link&quot; href=&quot;#Pre-commit&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Pre-commit is a tool that executes checks before you commit code to your repository. When those checks fail, your commit will be rejected. With that, your repository will never see not formatted code, or none type-checked one, or anything else depending on the checks you are going to include.&lt;/p&gt;
&lt;p&gt;You can either install it directly into your project using &lt;a href=&quot;https://python-poetry.org/docs/&quot;&gt;poetry&lt;/a&gt; or install it on your local machine. I prefer the latter, as pre-commit is only used locally and not on a CI/CD server. In contrast, black and mypy should run on a CI/CD server, thus, it makes sense to add them to the project’s dev dependencies. Here is how one could install it making use of the already existing tool virtual environment.&lt;/p&gt;
&lt;p&gt;Install pre-commit into the tools virtual env&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pyenv activate tools
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python -m pip install pre-commit
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pyenv deactivate
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pre-commit --version
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To use it, you first need to add a config file called &lt;em&gt;.pre-commit-config.yaml&lt;/em&gt; to the top-level folder of your project. In that file, you configure all the hooks that should run.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;touch .pre-commit-config.yaml .
&lt;/pre&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code&gt;repos:
    -   repo: https://github.com/psf/black
        rev: 20.8b1
        hooks:
        - id: black
          language_version: python3.8
    -   repo: https://github.com/pre-commit/mirrors-mypy
        rev: v0.782
        hooks:
        - id: mypy
    -   repo: https://gitlab.com/pycqa/flake8
        rev: 3.8.3  # pick a git hash / tag to point to
        hooks:
        - id: flake8
    -   repo: https://github.com/pycqa/isort
        rev: 5.5.1
        hooks:
        - id: isort&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the top level folder run&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pre-commit install
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is recommended to manually run pre-commit on all files as is it only touches the files that have been changed since the last commit.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pre-commit run --all --show-diff-on-failure
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, the hooks will run on every commit. The black hook will not only check for formatting issues but also format the files accordingly. Whenever you add a new hook, so also at the very beginning, it is recommended to manually run pre-commit on all files as is it only touches the files that have been changed since the last commit&lt;/p&gt;
&lt;h1 id=&quot;Results&quot;&gt;Results&lt;a class=&quot;anchor-link&quot; href=&quot;#Results&quot;&gt; &lt;/a&gt;&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/wojtek-zubera/images/copied_from_nb/poetry_pyenv_imgs/precommit_pipeline.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;So what we have is a pipeline that safeguards project against wrongly-formatted code &amp;mdash; now we can focus on content.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Credits to&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://towardsdatascience.com/how-to-setup-an-awesome-python-environment-for-data-science-or-anything-else-35d358cc95d5&quot;&gt;Simon Hawe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ljvmiranda921.github.io/notebook/2018/06/21/precommits-using-black-and-flake8/&quot;&gt;LJ MIRANDA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://luiggi629.github.io/wojtek-zubera/poetry_pyenv_imgs/precommit_pipeline.png" /><media:content medium="image" url="https://luiggi629.github.io/wojtek-zubera/poetry_pyenv_imgs/precommit_pipeline.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>